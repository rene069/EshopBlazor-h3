// <auto-generated />
using Datalayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datalayer.Migrations
{
    [DbContext(typeof(EShopContext))]
    partial class EShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Datalayer.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Nvidia"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Logitech"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Asus"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "AMD"
                        },
                        new
                        {
                            BrandId = 100,
                            BrandName = "Andet"
                        });
                });

            modelBuilder.Entity("Datalayer.Models.Produkt", b =>
                {
                    b.Property<int>("ProduktId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduktId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Placeholder\\istockphoto-1332167985-170667a.jpg");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProduktName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypesId")
                        .HasColumnType("int");

                    b.HasKey("ProduktId");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypesId");

                    b.ToTable("Produkts");

                    b.HasData(
                        new
                        {
                            ProduktId = 1,
                            BrandId = 1,
                            Description = "bla bla bla description",
                            IsSoftDeleted = false,
                            Price = 10099m,
                            ProduktName = "4090 RTX Nvidia",
                            TypesId = 1
                        },
                        new
                        {
                            ProduktId = 2,
                            BrandId = 1,
                            Description = "bla bla bla description",
                            IsSoftDeleted = false,
                            Price = 15999m,
                            ProduktName = "3090 RTX Nvida",
                            TypesId = 1
                        },
                        new
                        {
                            ProduktId = 3,
                            BrandId = 2,
                            Description = "bla bla bla description",
                            IsSoftDeleted = false,
                            Price = 1599m,
                            ProduktName = "LogiTech Meistro Keyboard",
                            TypesId = 2
                        },
                        new
                        {
                            ProduktId = 4,
                            BrandId = 3,
                            Description = "bla bla bla description",
                            IsSoftDeleted = false,
                            Price = 2599m,
                            ProduktName = "Asus Motherboard 3000x",
                            TypesId = 3
                        },
                        new
                        {
                            ProduktId = 5,
                            BrandId = 4,
                            Description = "bla bla bla description",
                            IsSoftDeleted = false,
                            Price = 50000m,
                            ProduktName = "AMD ThredRipper 9999x",
                            TypesId = 4
                        });
                });

            modelBuilder.Entity("Datalayer.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "SalesRep"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Datalayer.Models.Types", b =>
                {
                    b.Property<int>("TypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypesId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypesId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            TypesId = 1,
                            TypeName = "GraphicsCard"
                        },
                        new
                        {
                            TypesId = 2,
                            TypeName = "Keyboard"
                        },
                        new
                        {
                            TypesId = 3,
                            TypeName = "Motherboard"
                        },
                        new
                        {
                            TypesId = 4,
                            TypeName = "CPU"
                        },
                        new
                        {
                            TypesId = 100,
                            TypeName = "Andet"
                        });
                });

            modelBuilder.Entity("Datalayer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSoftDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "testvej 21",
                            Email = "rene@email.dk",
                            IsSoftDeleted = false,
                            Password = "1234",
                            RoleId = 1,
                            UserName = "René",
                            ZipCode = 2000
                        },
                        new
                        {
                            UserId = 2,
                            Address = "testvej 11",
                            Email = "Frederik@email.dk",
                            IsSoftDeleted = false,
                            Password = "1234",
                            RoleId = 2,
                            UserName = "Benjamin",
                            ZipCode = 3000
                        },
                        new
                        {
                            UserId = 3,
                            Address = "testvej 11",
                            Email = "Benjamin@email.dk",
                            IsSoftDeleted = false,
                            Password = "1234",
                            RoleId = 3,
                            UserName = "Frederik",
                            ZipCode = 3000
                        });
                });

            modelBuilder.Entity("Datalayer.Models.UserProdukt", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProduktId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProduktId");

                    b.HasIndex("ProduktId")
                        .IsUnique();

                    b.ToTable("UserProdukts");
                });

            modelBuilder.Entity("Datalayer.Models.Produkt", b =>
                {
                    b.HasOne("Datalayer.Models.Brand", "Brand")
                        .WithMany("Produkts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalayer.Models.Types", "Type")
                        .WithMany("Produkts")
                        .HasForeignKey("TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Datalayer.Models.User", b =>
                {
                    b.HasOne("Datalayer.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Datalayer.Models.UserProdukt", b =>
                {
                    b.HasOne("Datalayer.Models.Produkt", "Produkt")
                        .WithOne("UserProdukt")
                        .HasForeignKey("Datalayer.Models.UserProdukt", "ProduktId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datalayer.Models.User", "User")
                        .WithMany("UserProdukts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produkt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datalayer.Models.Brand", b =>
                {
                    b.Navigation("Produkts");
                });

            modelBuilder.Entity("Datalayer.Models.Produkt", b =>
                {
                    b.Navigation("UserProdukt")
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.Models.Types", b =>
                {
                    b.Navigation("Produkts");
                });

            modelBuilder.Entity("Datalayer.Models.User", b =>
                {
                    b.Navigation("UserProdukts");
                });
#pragma warning restore 612, 618
        }
    }
}
